---
swagger: "2.0"
info:
  description: "This is the API for the 'Hello Neighbour' project inspired from the\
    \ COVID-19 Global Church Hack"
  version: "0.0.2"
  title: "Hello Neighbour"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "api.hello-neighbour.org"
basePath: "/v0"
tags:
- name: "administrator"
  description: "Actions only a system administrator can take"
- name: "leader"
  description: "Everything that relates to church leaders interacting with the system"
- name: "member"
  description: "Everything relating to church members interacting with the system"
schemes:
- "https"
security:
- jwtAuth: []
paths:
  /church:
    get:
      tags:
      - "member"
      summary: "Retrieve all signed up churches"
      description: "Retrieve church details."
      operationId: "getChurches"
      parameters: []
      responses:
        "200":
          description: "Church details"
          schema:
            $ref: "#/definitions/ChurchPublic"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Church not found"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "member"
      summary: "Request new church"
      description: "Request for adding new church to the system to invite members\
        \ to"
      operationId: "addChurch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Church details for new account"
        required: true
        schema:
          $ref: "#/definitions/ChurchIn"
        x-exportParamName: "Body"
      responses:
        "204":
          description: "Church request sent"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
  /church/{churchUuid}:
    get:
      tags:
      - "leader"
      summary: "Retrieve details of a specific church"
      description: "Retrieve church details."
      operationId: "getChurch"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "ChurchUuid"
      responses:
        "200":
          description: "Church details"
          schema:
            $ref: "#/definitions/Church"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Church not found"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "leader"
      summary: "Update church details"
      description: "Update church details."
      operationId: "editChurch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "ChurchUuid"
      - in: "body"
        name: "body"
        description: "New church details"
        required: true
        schema:
          $ref: "#/definitions/ChurchIn"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Church profile modified"
          schema:
            $ref: "#/definitions/ChurchIn"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Church not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "leader"
      summary: "Delete church"
      description: "Delete a church from the system, disassociating member accounts."
      operationId: "deleteChurch"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "ChurchUuid"
      responses:
        "204":
          description: "Church deleted"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Church not found"
          schema:
            $ref: "#/definitions/Error"
  /church/{churchUuid/activate:
    put:
      tags:
      - "administrator"
      summary: "Activate or deactivate church"
      description: "Activate or deactivate a church, such as for accepting a new church\
        \ request."
      operationId: "updateChurchActivate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "ChurchUuid"
      - in: "body"
        name: "isActive"
        description: "Active flag - T/F"
        required: true
        schema:
          type: "boolean"
        x-exportParamName: "IsActive"
      responses:
        "204":
          description: "Activation status changed"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Church not found"
          schema:
            $ref: "#/definitions/Error"
  /church/{churchUuid}/invite:
    post:
      tags:
      - "leader"
      summary: "Send invite"
      description: "Send an email invite to add new church members"
      operationId: "sendInvite"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "ChurchUuid"
      - in: "body"
        name: "email"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/MemberInvite"
        x-exportParamName: "Email"
      responses:
        "204":
          description: "Invites sent"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Church not found"
          schema:
            $ref: "#/definitions/Error"
  /church/{churchUuid}/user:
    get:
      tags:
      - "leader"
      summary: "Retrieve church members"
      description: "Retrieve all members associated with a specific church."
      operationId: "getChurchMembers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "ChurchUuid"
      responses:
        "200":
          description: "Member list"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserPublic"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Church not found"
          schema:
            $ref: "#/definitions/Error"
  /church/{churchUuid}/user/{userUuid}:
    delete:
      tags:
      - "leader"
      summary: "Remove member from church"
      description: "Disassociates member from church system. User account will still\
        \ exist."
      operationId: "deleteChurchMember"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "ChurchUuid"
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "UserUuid"
      responses:
        "204":
          description: "Church member removed"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Church/user not found"
          schema:
            $ref: "#/definitions/Error"
  /church/{churchUuid}/question:
    get:
      tags:
      - "leader"
      summary: "Retrieve list of all questions"
      description: "Retrieve questions of a specific church."
      operationId: "getChurchQuestions"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "ChurchUuid"
      responses:
        "200":
          description: "Question list"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Question"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Church not found"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "leader"
      summary: "Add question"
      description: "Add a question to the system."
      operationId: "addQuestion"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "ChurchUuid"
      - in: "body"
        name: "body"
        description: "Question for the church"
        required: true
        schema:
          $ref: "#/definitions/QuestionIn"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Question added"
          schema:
            $ref: "#/definitions/Question"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Church not found"
          schema:
            $ref: "#/definitions/Error"
  /church/{churchUuid}/matchgroup:
    get:
      tags:
      - "leader"
      summary: "Retrieve list of current match groups"
      description: "Retrieve all current match groups for a specific church."
      operationId: "getMatchGroups"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "ChurchUuid"
      responses:
        "200":
          description: "Match group list"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Church not found"
          schema:
            $ref: "#/definitions/Error"
  /user:
    get:
      tags:
      - "administrator"
      summary: "Retrieve all users"
      description: "Retrieve all users in the system."
      operationId: "getUsers"
      parameters: []
      responses:
        "200":
          description: "User list"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: "Create new user"
      description: "Add a new user to the system."
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User details"
        required: true
        schema:
          $ref: "#/definitions/UserIn"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "User created"
          schema:
            $ref: "#/definitions/Question"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
      security: []
  /user/{userUuid}:
    get:
      tags:
      - "member"
      summary: "Retrieve user details"
      description: "Retrieve all user information."
      operationId: "getUser"
      parameters:
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "UserUuid"
      responses:
        "200":
          description: "User details"
          schema:
            $ref: "#/definitions/User"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "member"
      summary: "Update user"
      description: "Update user information."
      operationId: "editUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "UserUuid"
      - in: "body"
        name: "body"
        description: "User details"
        required: true
        schema:
          $ref: "#/definitions/UserIn"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "User account updated"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "member"
      summary: "Delete user"
      description: "Delete user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "UserUuid"
      responses:
        "204":
          description: "User deleted"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"
  /user/{userUuid}/matchGroup:
    get:
      tags:
      - "member"
      summary: "Retrieve current match group"
      description: "Retrieve current match group for a user."
      operationId: "getMatchGroup"
      produces:
      - "application/json"
      parameters:
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "UserUuid"
      responses:
        "200":
          description: "Match group"
          schema:
            $ref: "#/definitions/Group"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"
  /user/{userUuid}/matchgroup/{groupUuid}/bulletin:
    get:
      tags:
      - "member"
      summary: "Retrieve all messages"
      description: "Retrieve messages posted on a group's bulletin."
      operationId: "getMessages"
      parameters:
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "UserUuid"
      - name: "groupUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "GroupUuid"
      responses:
        "200":
          description: "Messages on a group's bulletin."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Message"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Church/group not found"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "member"
      summary: "Send message"
      description: "Post a message to the group's bulletin."
      operationId: "sendMessage"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "UserUuid"
      - name: "groupUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "GroupUuid"
      - in: "body"
        name: "body"
        description: "Message to send to group"
        required: true
        schema:
          $ref: "#/definitions/MessageIn"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Message sent"
          schema:
            $ref: "#/definitions/MessageIn"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Church/group not found"
          schema:
            $ref: "#/definitions/Error"
  /user/{userUuid}/contactmethod:
    post:
      tags:
      - "member"
      summary: "Add a contact method to a user profile"
      description: "Add a new contact method to an existing user profile."
      operationId: "addContactMethod"
      produces:
      - "application/json"
      parameters:
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "UserUuid"
      - in: "body"
        name: "body"
        description: "Details of new contact method"
        required: true
        schema:
          $ref: "#/definitions/ContactMethodIn"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Contact method created"
          schema:
            $ref: "#/definitions/ContactMethod"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
  /user/{userUuid}/contactmethod/{methodUuid}:
    put:
      tags:
      - "member"
      summary: "Update a contact method for a user"
      description: "Update a contact method for a user profile."
      operationId: "updateContactMethod"
      produces:
      - "application/json"
      parameters:
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "UserUuid"
      - name: "methodUuid"
        in: "path"
        description: "Contact method's UUID"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "MethodUuid"
      - in: "body"
        name: "body"
        description: "New details of contact method"
        required: true
        schema:
          $ref: "#/definitions/ContactMethodIn"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Contact method updated"
          schema:
            $ref: "#/definitions/ContactMethod"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Contact method or user not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "member"
      summary: "Delete a contact method from a user profile"
      description: "Delete a contact method from a user profile."
      operationId: "deleteContactMethod"
      produces:
      - "application/json"
      parameters:
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "UserUuid"
      - name: "methodUuid"
        in: "path"
        description: "Contact method's UUID"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "MethodUuid"
      responses:
        "204":
          description: "Contact method deleted"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Contact method or user not found"
          schema:
            $ref: "#/definitions/Error"
  /question:
    get:
      tags:
      - "administrator"
      summary: "Retrieve all questions"
      description: "Retrieve all questions in the system."
      operationId: "getQuestions"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "All questions"
          schema:
            $ref: "#/definitions/Question"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
  /question/{questionUuid}:
    get:
      tags:
      - "leader"
      summary: "Retrieve question"
      description: "Retrieve a question by UUID (restricted to logged in user's church)."
      operationId: "getQuestion"
      parameters:
      - name: "questionUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "QuestionUuid"
      responses:
        "200":
          description: "Church question"
          schema:
            $ref: "#/definitions/Question"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Question not found"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "leader"
      summary: "Update question"
      description: "Update a question that's already in the system."
      operationId: "modifyQuestion"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "questionUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "QuestionUuid"
      - in: "body"
        name: "body"
        description: "Question for the church"
        required: true
        schema:
          $ref: "#/definitions/QuestionIn"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Question updated"
          schema:
            $ref: "#/definitions/Question"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Question not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "leader"
      summary: "Delete question"
      description: "Delete a question from the system."
      operationId: "deleteQuestion"
      produces:
      - "application/json"
      parameters:
      - name: "questionUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "QuestionUuid"
      responses:
        "204":
          description: "Question deleted"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "User is not authorized to access"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Question not found"
          schema:
            $ref: "#/definitions/Error"
  /register/{userUuid}:
    put:
      tags:
      - "member"
      summary: "Accept invite"
      description: "Accept member invite and fill in remainder of user details."
      operationId: "acceptInvite"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "UserUuid"
      - in: "body"
        name: "body"
        description: "User details for new member account"
        required: true
        schema:
          $ref: "#/definitions/UserIn"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Member account registered"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"
      security: []
  /login:
    get:
      tags:
      - "member"
      summary: "Login user"
      description: "Login to a user account with the specified credentials. Issues\
        \ a JWT on success."
      operationId: "loginUser"
      parameters: []
      responses:
        "200":
          description: "User successfully logged in."
          schema:
            $ref: "#/definitions/JWT"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Invalid credentials"
          schema:
            $ref: "#/definitions/Error"
      security:
      - basicAuth: []
  /profile:
    get:
      tags:
      - "member"
      summary: "Logged in user's UUID and church UUID"
      description: "Returns the church and user UUID for the logged in user."
      operationId: "userProfile"
      parameters: []
      responses:
        "200":
          description: "User details."
          schema:
            $ref: "#/definitions/UserProfile"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "JWT is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
          schema:
            $ref: "#/definitions/Error"
      security:
      - basicAuth: []
securityDefinitions:
  jwtAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-token-type: "Bearer"
  basicAuth:
    type: "basic"
definitions:
  JWT:
    type: "object"
    required:
    - "jwt"
    properties:
      jwt:
        type: "string"
    example:
      jwt: "jwt"
  MemberInvite:
    type: "object"
    required:
    - "email"
    properties:
      email:
        type: "string"
        format: "email"
      first_name:
        type: "string"
      last_name:
        type: "string"
      date_of_birth:
        type: "string"
        format: "date"
  UserBase:
    type: "object"
    required:
    - "email"
    - "first_name"
    - "last_name"
    properties:
      email:
        type: "string"
        format: "email"
      first_name:
        type: "string"
      last_name:
        type: "string"
      description:
        type: "string"
      church:
        type: "string"
        format: "uuid"
      role:
        type: "string"
        enum:
        - "leader"
        - "member"
        - "admin"
  UserPublic:
    allOf:
    - $ref: "#/definitions/UserBase"
    - type: "object"
      required:
      - "uuid"
      properties:
        uuid:
          type: "string"
          format: "uuid"
        contact:
          type: "array"
          items:
            $ref: "#/definitions/ContactMethod"
  UserIn:
    allOf:
    - $ref: "#/definitions/UserBase"
    - type: "object"
      required:
      - "date_of_birth"
      - "password"
      properties:
        date_of_birth:
          type: "string"
          format: "date"
        password:
          type: "string"
  User:
    allOf:
    - $ref: "#/definitions/UserIn"
    - type: "object"
      required:
      - "uuid"
      properties:
        uuid:
          type: "string"
          format: "uuid"
        contact:
          type: "array"
          items:
            $ref: "#/definitions/ContactMethod"
  UserProfile:
    type: "object"
    required:
    - "church_uuid"
    - "user_uuid"
    properties:
      user_uuid:
        type: "string"
        format: "uuid"
      church_uuid:
        type: "string"
        format: "uuid"
    example:
      user_uuid: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      church_uuid: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  ChurchBase:
    type: "object"
    required:
    - "address"
    - "description"
    - "name"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      address:
        type: "string"
      website:
        type: "string"
        format: "url"
      email:
        type: "string"
        format: "email"
      phone:
        type: "string"
  ChurchPublic:
    allOf:
    - $ref: "#/definitions/ChurchBase"
    - type: "object"
      required:
      - "uuid"
      properties:
        uuid:
          type: "string"
          format: "uuid"
  ChurchIn:
    allOf:
    - $ref: "#/definitions/ChurchBase"
    - type: "object"
      required:
      - "group_size"
      - "member_basic_info_update"
      - "min_age"
      - "same_gender"
      properties:
        group_size:
          type: "integer"
          minimum: 2
          maximum: 10
          multipleOf: 2
        same_gender:
          type: "boolean"
        min_age:
          type: "integer"
        member_basic_info_update:
          type: "boolean"
  Church:
    allOf:
    - $ref: "#/definitions/ChurchIn"
    - type: "object"
      required:
      - "uuid"
      properties:
        uuid:
          type: "string"
          format: "uuid"
  ContactMethodIn:
    type: "object"
    required:
    - "contact_detail"
    - "label"
    - "user"
    properties:
      label:
        type: "string"
      contact_detail:
        type: "string"
      user:
        type: "string"
        format: "uuid"
  ContactMethod:
    allOf:
    - $ref: "#/definitions/ContactMethodIn"
    - type: "object"
      required:
      - "uuid"
      properties:
        uuid:
          type: "string"
          format: "uuid"
  QuestionIn:
    type: "object"
    required:
    - "church"
    - "question"
    properties:
      question:
        type: "string"
      church:
        type: "string"
        format: "uuid"
    example:
      question: "question"
      church: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  Question:
    allOf:
    - $ref: "#/definitions/QuestionIn"
    - type: "object"
      required:
      - "uuid"
      properties:
        uuid:
          type: "string"
          format: "uuid"
  Group:
    type: "object"
    required:
    - "created"
    - "users"
    - "uuid"
    properties:
      uuid:
        type: "string"
        format: "uuid"
      created:
        type: "string"
        format: "date"
      users:
        type: "array"
        items:
          $ref: "#/definitions/UserPublic"
      questions:
        type: "array"
        items:
          $ref: "#/definitions/Question"
    example:
      created: "2000-01-23"
      questions:
      - ""
      - ""
      uuid: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      users:
      - ""
      - ""
  MessageIn:
    type: "object"
    required:
    - "group"
    - "message"
    - "sent"
    - "user"
    properties:
      group:
        type: "string"
        format: "uuid"
      user:
        type: "string"
        format: "uuid"
      sent:
        type: "string"
        format: "datetime"
      message:
        type: "string"
    example:
      message: "message"
      user: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      sent: "sent"
      group: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  Message:
    allOf:
    - $ref: "#/definitions/MessageIn"
    - type: "object"
      required:
      - "uuid"
      properties:
        uuid:
          type: "string"
          format: "uuid"
  Error:
    type: "object"
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
responses:
  ClientError:
    description: "Invalid input"
    schema:
      $ref: "#/definitions/Error"
  Unauthenticated:
    description: "JWT is missing or invalid"
    headers:
      WWW_Authenticate:
        type: "string"
    schema:
      $ref: "#/definitions/Error"
  Unauthorized:
    description: "User is not authorized to access"
    headers:
      WWW_Authenticate:
        type: "string"
    schema:
      $ref: "#/definitions/Error"
