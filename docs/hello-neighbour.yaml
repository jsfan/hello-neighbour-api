swagger: "2.0"
info:
  description: "This is the API for the 'Hello Neighbour' project inspired from the COVID-19 Global Church Hack"
  version: "0.0.2"
  title: "Hello Neighbour"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "api.hello-neighbour.org"
basePath: "/v0"
tags:
- name: "administrator"
  description: "Actions only a system administrator can take"
- name: "leader"
  description: "Everything that relates to church leaders interacting with the system"
- name: "member"
  description: "Everything relating to church members interacting with the system"
schemes:
- "https"
securityDefinitions:
  jwtAuth:
    type: apiKey
    name: Authorization
    in: header
    x-token-type: Bearer
  basicAuth:
    type: basic
security:
  - jwtAuth: []
paths:
  /church:
    post:
      tags:
      - "member"
      summary: "Request new church"
      description: "Request for adding new church to the system to invite members to"
      operationId: "addChurch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Church details for new account"
        required: true
        schema:
          $ref: "#/definitions/ChurchIn"
      responses:
        204:
          description: "Church request sent"
        400:
          $ref: "#/responses/ClientError"
        401:
          $ref: "#/responses/Unauthenticated"
    get:
      tags:
      - "member"
      summary: "Retrieve all signed up churches"
      description: "Retrieve church details."
      operationId: "getChurches"
      responses:
        200:
          description: "Church details"
          schema:
            $ref: "#/definitions/ChurchPublic"
        401:
          $ref: "#/responses/Unauthenticated"
        404:
          description: "Church not found"
          schema:
            $ref:  "#/definitions/Error"
  
  /church/{churchUuid}:
    get:
      tags:
      - "leader"
      summary: "Retrieve details of a specific church"
      description: "Retrieve church details."
      operationId: "getChurch"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Church details"
          schema:
            $ref: "#/definitions/Church"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "Church not found"
          schema:
            $ref:  "#/definitions/Error"
    put:
      tags:
      - "leader"
      summary: "Update church details"
      description: "Update church details."
      operationId: "editChurch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "New church details"
        required: true
        schema:
          $ref: "#/definitions/ChurchIn"
      responses:
        200:
          description: "Church profile modified"
          schema:
            $ref: "#/definitions/ChurchIn"
        400:
          $ref: "#/responses/ClientError"
        401:
          $ref: "#/responses/Unauthenticated"
        404:
          description: "Church not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "leader"
      summary: "Delete church"
      description: "Delete a church from the system, disassociating member accounts."
      operationId: "deleteChurch"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
      responses:
        204:
          description: "Church deleted"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "Church not found"
          schema:
            $ref: "#/definitions/Error"
  
  /church/{churchUuid/activate:
    put:
      tags:
      - "administrator"
      summary: "Activate or deactivate church"
      description: "Activate or deactivate a church, such as for accepting a new church request."
      operationId: "updateChurchActivate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "isActive"
        description: "Active flag - T/F"
        schema:
          type: "boolean"
        required: true
      responses:
        204:
          description: "Activation status changed"
        400:
          $ref: "#/responses/ClientError"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "Church not found"
          schema:
            $ref:  "#/definitions/Error"
  
  /church/{churchUuid}/invite:
    post:
      tags:
      - "leader"
      summary: "Send invite"
      description: "Send an email invite to add new church members"
      operationId: "sendInvite"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "email"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/MemberInvite"
        required: true
      responses:
        204:
          description: "Invites sent"
        400:
          $ref: "#/responses/ClientError"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "Church not found"
          schema:
            $ref:  "#/definitions/Error"

  /church/{churchUuid}/user:
    get:
      tags:
      - "leader"
      summary: "Retrieve church members"
      description: "Retrieve all members associated with a specific church."
      operationId: "getChurchMembers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Member list"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserPublic"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "Church not found"
          schema:
            $ref:  "#/definitions/Error"
            
  /church/{churchUuid}/user/{userUuid}:
    delete:
      tags:
      - "leader"
      summary: "Remove member from church"
      description: "Disassociates member from church system. User account will still exist."
      operationId: "deleteChurchMember"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
      responses:
        204:
          description: "Church member removed"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "Church/user not found"
          schema:
            $ref: "#/definitions/Error"

  /church/{churchUuid}/question:
    post:
      tags:
      - "leader"
      summary: "Add question"
      description: "Add a question to the system."
      operationId: "addQuestion"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Question for the church"
        required: true
        schema:
          $ref: "#/definitions/QuestionIn"
      responses:
        200:
          description: "Question added"
          schema:
            $ref: "#/definitions/Question"
        400:
          $ref: "#/responses/ClientError"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "Church not found"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
      - "leader"
      summary: "Retrieve list of all questions"
      description: "Retrieve questions of a specific church."
      operationId: "getChurchQuestions"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Question list"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Question"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "Church not found"
          schema:
            $ref:  "#/definitions/Error"

  /church/{churchUuid}/matchgroup:
    get:
      tags:
      - "leader"
      summary: "Retrieve list of current match groups"
      description: "Retrieve all current match groups for a specific church."
      operationId: "getMatchGroups"
      produces:
      - "application/json"
      parameters:
      - name: "churchUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Match group list"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
        400:
          $ref: "#/responses/ClientError"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "Church not found"
          schema:
            $ref:  "#/definitions/Error"

  /user:
    post:
      security: []
      summary: "Create new user"
      description: "Add a new user to the system."
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User details"
        required: true
        schema:
          $ref: "#/definitions/UserIn"
      responses:
        200:
          description: "User created"
          schema:
            $ref: "#/definitions/Question"
        400:
          $ref: "#/responses/ClientError"
    get:
      tags:
      - "administrator"
      summary: "Retrieve all users"
      description: "Retrieve all users in the system."
      operationId: "getUsers"
      responses:
        200:
          description: "User list"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"

  /user/{userUuid}:
    get:
      tags:
      - "member"
      summary: "Retrieve user details"
      description: "Retrieve all user information."
      operationId: "getUser"
      parameters:
      - in: "path"
        name: "userUuid"
        type: "string"
        format: "uuid"
        required: true
      responses:
        200:
          description: "User details"
          schema:
            $ref: "#/definitions/User"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "User not found"
          schema:
            $ref:  "#/definitions/Error"
    put:
      tags:
      - "member"
      summary: "Update user"
      description: "Update user information."
      operationId: "editUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userUuid"
        type: "string"
        format: "uuid"
        required: true
      - in: "body"
        name: "body"
        description: "User details"
        required: true
        schema:
          $ref: "#/definitions/UserIn"
      responses:
        200:
          description: "User account updated"
          schema:
            $ref: "#/definitions/User"
        400:
          $ref: "#/responses/ClientError"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "member"
      summary: "Delete user"
      description: "Delete user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
        - in: "path"
          name: "userUuid"
          type: "string"
          format: "uuid"
          required: true
      responses:
        204:
          description: "User deleted"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"

  /user/{userUuid}/matchGroup:
    get:
      tags:
      - "member"
      summary: "Retrieve current match group"
      description: "Retrieve current match group for a user."
      operationId: "getMatchGroup"
      produces:
      - "application/json"
      parameters:
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Match group"
          schema:
            $ref: "#/definitions/Group"
        400:
          $ref: "#/responses/ClientError"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "User not found"
          schema:
            $ref:  "#/definitions/Error"

  /user/{userUuid}/matchgroup/{groupUuid}/bulletin:
    post:
      tags:
      - "member"
      summary: "Send message"
      description: "Post a message to the group's bulletin."
      operationId: "sendMessage"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userUuid"
        type: "string"
        format: "uuid"
        required: true
      - in: "path"
        name: "groupUuid"
        type: "string"
        format: "uuid"
        required: true
      - in: "body"
        name: "body"
        description: "Message to send to group"
        required: true
        schema:
          $ref: "#/definitions/MessageIn"
      responses:
        200:
          description: "Message sent"
          schema:
            $ref: "#/definitions/MessageIn"
        400:
          $ref: "#/responses/ClientError"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "Church/group not found"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
      - "member"
      summary: "Retrieve all messages"
      description: "Retrieve messages posted on a group's bulletin."
      operationId: "getMessages"
      parameters:
      - in: "path"
        name: "userUuid"
        type: "string"
        format: "uuid"
        required: true
      - in: "path"
        name: "groupUuid"
        type: "string"
        format: "uuid"
        required: true
      responses:
        200:
          description: "Messages on a group's bulletin."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Message"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "Church/group not found"
          schema:
            $ref: "#/definitions/Error"

  /user/{userUuid}/contactmethod:
    post:
      tags:
      - "member"
      summary: "Add a contact method to a user profile"
      description: "Add a new contact method to an existing user profile."
      operationId: "addContactMethod"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userUuid"
        type: "string"
        format: "uuid"
        required: true
      - in: "body"
        name: "body"
        description: "Details of new contact method"
        required: true
        schema:
          $ref: "#/definitions/ContactMethodIn"
      responses:
        200:
          description: "Contact method created"
          schema:
            $ref: "#/definitions/ContactMethod"
        400:
          $ref: "#/responses/ClientError"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"

  /user/{userUuid}/contactmethod/{methodUuid}:
    put:
      tags:
      - "member"
      summary: "Update a contact method for a user"
      description: "Update a contact method for a user profile."
      operationId: "updateContactMethod"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userUuid"
        type: "string"
        format: "uuid"
        required: true
      - in: "path"
        name: "methodUuid"
        description: "Contact method's UUID"
        type: "string"
        format: "uuid"
        required: true
      - in: "body"
        name: "body"
        description: "New details of contact method"
        required: true
        schema:
          $ref: "#/definitions/ContactMethodIn"
      responses:
        200:
          description: "Contact method updated"
          schema:
            $ref: "#/definitions/ContactMethod"
        400:
          $ref: "#/responses/ClientError"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "Contact method or user not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "member"
      summary: "Delete a contact method from a user profile"
      description: "Delete a contact method from a user profile."
      operationId: "deleteContactMethod"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userUuid"
        type: "string"
        format: "uuid"
        required: true
      - in: "path"
        name: "methodUuid"
        description: "Contact method's UUID"
        type: "string"
        format: "uuid"
        required: true
      responses:
        204:
          description: "Contact method deleted"
        400:
          $ref: "#/responses/ClientError"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "Contact method or user not found"
          schema:
            $ref: "#/definitions/Error"

  /question:
    get:
      tags:
      - "administrator"
      summary: "Retrieve all questions"
      description: "Retrieve all questions in the system."
      operationId: "getQuestions"
      produces:
      - "application/json"
      responses:
        200:
          description: "All questions"
          schema:
            $ref: "#/definitions/Question"
        400:
          $ref: "#/responses/ClientError"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"

  /question/{questionUuid}:
    get:
      tags:
      - "leader"
      summary: "Retrieve question"
      description: "Retrieve a question by UUID (restricted to logged in user's church)."
      operationId: "getQuestion"
      parameters:
      - in: "path"
        name: "questionUuid"
        type: "string"
        format: "uuid"
        required: true
      responses:
        200:
          description: "Church question"
          schema:
            $ref: "#/definitions/Question"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "Question not found"
          schema:
            $ref:  "#/definitions/Error"
    put:
      tags:
      - "leader"
      summary: "Update question"
      description: "Update a question that's already in the system."
      operationId: "modifyQuestion"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "questionUuid"
        type: "string"
        format: "uuid"
        required: true
      - in: "body"
        name: "body"
        description: "Question for the church"
        required: true
        schema:
          $ref: "#/definitions/QuestionIn"
      responses:
        200:
          description: "Question updated"
          schema:
            $ref: "#/definitions/Question"
        400:
          $ref: "#/responses/ClientError"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "Question not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "leader"
      summary: "Delete question"
      description: "Delete a question from the system."
      operationId: "deleteQuestion"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "questionUuid"
        type: "string"
        format: "uuid"
        required: true
      responses:
        204:
          description: "Question deleted"
        401:
          $ref: "#/responses/Unauthenticated"
        403:
          $ref: "#/responses/Unauthorized"
        404:
          description: "Question not found"
          schema:
            $ref: "#/definitions/Error"
 
  /register/{userUuid}:
    put:
      tags:
      - "member"
      security: []
      summary: "Accept invite"
      description: "Accept member invite and fill in remainder of user details."
      operationId: "acceptInvite"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userUuid"
        type: "string"
        format: "uuid"
        required: true
      - in: "body"
        name: "body"
        description: "User details for new member account"
        required: true
        schema:
          $ref: "#/definitions/UserIn"
      responses:
        200:
          description: "Member account registered"
          schema:
            $ref: "#/definitions/User"
        400:
          $ref: "#/responses/ClientError"
        404:
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"

  /login:
    get:
      tags:
      - "member"
      security:
        - basicAuth: []
      summary: "Login user"
      description: "Login to a user account with the specified credentials. Issues a JWT on success."
      operationId: "loginUser"
      responses:
        200:
          description: "User successfully logged in."
          schema:
            $ref: "#/definitions/JWT"
        400:
          $ref: "#/responses/ClientError"
        401:
          description: "Invalid credentials"
          schema:
            $ref: "#/definitions/Error"

  /profile:
    get:
      tags:
      - "member"
      security:
        - basicAuth: []
      summary: "Logged in user's UUID and church UUID"
      description: "Returns the church and user UUID for the logged in user."
      operationId: "userProfile"
      responses:
        200:
          description: "User details."
          schema:
            $ref: "#/definitions/UserProfile"
        400:
          $ref: "#/responses/ClientError"
        401:
          $ref: "#/responses/Unauthenticated"

definitions:
  JWT:
    type: "object"
    properties:
      jwt:
        type: "string"
    required: [jwt]
  
  MemberInvite:
    type: "object"
    properties:
      email:
        type: "string"
        format: "email"
      first_name:
        type: "string"
      last_name:
        type: "string"
      date_of_birth:
        type: "string"
        format: "date"
    required: [email]
  
  UserBase:
    type: "object"
    properties:
      email:
        type: "string"
        format: "email"
      first_name:
        type: "string"
      last_name:
        type: "string"
      description:
        type: "string"
      church:
        type: "string"
        format: "uuid"
      role:
        type: "string"
        enum: ["leader", "member", "admin"]
    required: [email, first_name, last_name]

  UserPublic:
    allOf:
      - $ref: "#/definitions/UserBase"
      - type: "object"
        properties:
          uuid:
            type: "string"
            format: "uuid"
          contact:
            type: "array"
            items:
              $ref: "#/definitions/ContactMethod"
        required: [uuid]
  
  UserIn:
    allOf:
      - $ref: "#/definitions/UserBase"
      - type: "object"
        properties:
          date_of_birth:
            type: "string"
            format: "date"
          password:
            type: "string"
        required: [date_of_birth, password]
            
  User:
    allOf:
      - $ref: "#/definitions/UserIn"
      - type: "object"
        properties:
          uuid:
            type: "string"
            format: "uuid"
          contact:
            type: "array"
            items:
              $ref: "#/definitions/ContactMethod"
        required: [uuid]

  UserProfile:
    type: "object"
    properties:
      user_uuid:
        type: "string"
        format: "uuid"
      church_uuid:
        type: "string"
        format: "uuid"
    required: [user_uuid, church_uuid]

  ChurchBase:
    type: "object"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      address:
        type: "string"
      website:
        type: "string"
        format: "url"
      email:
        type: "string"
        format: "email"
      phone:
        type: "string"
    required: [name, description, address]

  ChurchPublic:
    allOf:
      - $ref: "#/definitions/ChurchBase"
      - type: "object"
        properties:
          uuid:
            type: "string"
            format: "uuid"
        required: [uuid]

  ChurchIn:
    allOf:
      - $ref: "#/definitions/ChurchBase"
      - type: "object"
        properties:
          group_size:
            type: "integer"
            minimum: 2
            multipleOf: 2
            maximum: 10
          same_gender:
            type: "boolean"
          min_age:
            type: "integer"
          member_basic_info_update:
            type: "boolean"
        required: [group_size, same_gender, min_age, member_basic_info_update]

  Church:
    allOf:
      - $ref: "#/definitions/ChurchIn"
      - type: "object"
        properties:
          uuid:
            type: "string"
            format: "uuid"
        required: [uuid]

  ContactMethodIn:
    type: "object"
    properties:
      label:
        type: "string"
      contact_detail:
        type: "string"
      user:
        type: "string"
        format: "uuid"
    required: [label, contact_detail, user]

  ContactMethod:
    allOf:
    - $ref: "#/definitions/ContactMethodIn"
    - type: "object"
      properties:
        uuid:
         type: "string"
         format: "uuid"
      required: [uuid]

  QuestionIn:
    type: "object"
    properties:
      question:
        type: "string"
      church:
        type: "string"
        format: "uuid"
    required: [question, church]

  Question:
    allOf:
    - $ref: "#/definitions/QuestionIn"
    - type: "object"
      properties:
        uuid:
         type: "string"
         format: "uuid"
      required: [uuid]

  Group:
    type: "object"
    properties:
      uuid:
        type: "string"
        format: "uuid"
      created:
        type: "string"
        format: "date"
      users:
        type: "array"
        items:
          $ref: "#/definitions/UserPublic"
      questions:
        type: "array"
        items:
          $ref: "#/definitions/Question"
    required: [uuid, created, users]

  MessageIn:
    type: "object"
    properties:
      group:
        type: "string"
        format: "uuid"
      user:
        type: "string"
        format: "uuid"
      sent:
        type: "string"
        format: "datetime"
      message:
        type: "string"
    required: [group, user, sent, message]
  
  Message:
    allOf:
    - $ref: "#/definitions/MessageIn"
    - type: "object"
      properties:
        uuid:
          type: "string"
          format: "uuid"
      required: [uuid]
  
  Error:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
    required: [code, message]

responses:
  ClientError:
    description: "Invalid input"
    schema:
      $ref: "#/definitions/Error"
  Unauthenticated:
    description: "JWT is missing or invalid"
    headers:
      WWW_Authenticate:
        type: "string"
    schema:
      $ref: "#/definitions/Error"
  Unauthorized:
    description: "User is not authorized to access"
    headers:
      WWW_Authenticate:
        type: "string"
    schema:
      $ref: "#/definitions/Error"
