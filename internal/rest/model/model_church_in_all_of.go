/*
 * Hello Neighbour
 *
 * This is the API for the 'Hello Neighbour' project inspired from the COVID-19 Global Church Hack
 *
 * API version: 0.0.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package model

import "github.com/jsfan/hello-neighbour-api/internal/rest/common"

type ChurchInAllOf struct {
	GroupSize int32 `json:"group_size"`

	SameGender bool `json:"same_gender"`

	MinAge int32 `json:"min_age"`

	MemberBasicInfoUpdate bool `json:"member_basic_info_update"`
}

// AssertChurchInAllOfRequired checks if the required fields are not zero-ed
func AssertChurchInAllOfRequired(obj ChurchInAllOf) error {
	elements := map[string]interface{}{
		"group_size":               obj.GroupSize,
		"same_gender":              obj.SameGender,
		"min_age":                  obj.MinAge,
		"member_basic_info_update": obj.MemberBasicInfoUpdate,
	}
	for name, el := range elements {
		if isZero := common.IsZeroValue(el); isZero {
			return &common.RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseChurchInAllOfRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ChurchInAllOf (e.g. [][]ChurchInAllOf), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseChurchInAllOfRequired(objSlice interface{}) error {
	return common.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aChurchInAllOf, ok := obj.(ChurchInAllOf)
		if !ok {
			return common.ErrTypeAssertionError
		}
		return AssertChurchInAllOfRequired(aChurchInAllOf)
	})
}
