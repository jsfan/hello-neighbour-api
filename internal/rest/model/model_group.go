/*
 * Hello Neighbour
 *
 * This is the API for the 'Hello Neighbour' project inspired from the COVID-19 Global Church Hack
 *
 * API version: 0.0.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package model

import (
	"github.com/jsfan/hello-neighbour-api/internal/rest/common"
)

type Group struct {
	Uuid string `json:"uuid"`

	Created string `json:"created"`

	Users []UserPublic `json:"users"`

	Questions []Question `json:"questions,omitempty"`
}

// AssertGroupRequired checks if the required fields are not zero-ed
func AssertGroupRequired(obj Group) error {
	elements := map[string]interface{}{
		"uuid":    obj.Uuid,
		"created": obj.Created,
		"users":   obj.Users,
	}
	for name, el := range elements {
		if isZero := common.IsZeroValue(el); isZero {
			return &common.RequiredError{Field: name}
		}
	}

	for _, el := range obj.Users {
		if err := AssertUserPublicRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Questions {
		if err := AssertQuestionRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseGroupRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Group (e.g. [][]Group), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseGroupRequired(objSlice interface{}) error {
	return common.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aGroup, ok := obj.(Group)
		if !ok {
			return common.ErrTypeAssertionError
		}
		return AssertGroupRequired(aGroup)
	})
}
