/*
 * Hello Neighbour
 *
 * This is the API for the 'Hello Neighbour' project inspired from the COVID-19 Global Church Hack
 *
 * API version: 0.0.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package model

import "github.com/jsfan/hello-neighbour-api/internal/rest/common"

type UserPublicAllOf struct {
	Uuid string `json:"uuid"`

	Contact []ContactMethod `json:"contact,omitempty"`
}

// AssertUserPublicAllOfRequired checks if the required fields are not zero-ed
func AssertUserPublicAllOfRequired(obj UserPublicAllOf) error {
	elements := map[string]interface{}{
		"uuid": obj.Uuid,
	}
	for name, el := range elements {
		if isZero := common.IsZeroValue(el); isZero {
			return &common.RequiredError{Field: name}
		}
	}

	for _, el := range obj.Contact {
		if err := AssertContactMethodRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseUserPublicAllOfRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of UserPublicAllOf (e.g. [][]UserPublicAllOf), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseUserPublicAllOfRequired(objSlice interface{}) error {
	return common.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUserPublicAllOf, ok := obj.(UserPublicAllOf)
		if !ok {
			return common.ErrTypeAssertionError
		}
		return AssertUserPublicAllOfRequired(aUserPublicAllOf)
	})
}
