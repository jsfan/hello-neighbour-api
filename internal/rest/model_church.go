/*
 * Hello Neighbour
 *
 * This is the API for the 'Hello Neighbour' project inspired from the COVID-19 Global Church Hack
 *
 * API version: 0.0.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package rest

type Church struct {

	Name string `json:"name"`

	Description string `json:"description"`

	Address string `json:"address"`

	Website string `json:"website,omitempty"`

	Email string `json:"email,omitempty"`

	Phone string `json:"phone,omitempty"`

	GroupSize int32 `json:"group_size"`

	SameGender bool `json:"same_gender"`

	MinAge int32 `json:"min_age"`

	MemberBasicInfoUpdate bool `json:"member_basic_info_update"`

	Uuid string `json:"uuid"`
}

// AssertChurchRequired checks if the required fields are not zero-ed
func AssertChurchRequired(obj Church) error {
	elements := map[string]interface{}{
		"name": obj.Name,
		"description": obj.Description,
		"address": obj.Address,
		"group_size": obj.GroupSize,
		"same_gender": obj.SameGender,
		"min_age": obj.MinAge,
		"member_basic_info_update": obj.MemberBasicInfoUpdate,
		"uuid": obj.Uuid,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseChurchRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Church (e.g. [][]Church), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseChurchRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aChurch, ok := obj.(Church)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertChurchRequired(aChurch)
	})
}
