/*
 * Hello Neighbour
 *
 * This is the API for the 'Hello Neighbour' project inspired from the COVID-19 Global Church Hack
 *
 * API version: 0.0.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package rest

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/jsfan/hello-neighbour-api/internal/rest/common"
	"github.com/jsfan/hello-neighbour-api/internal/rest/model"

	"github.com/gorilla/mux"
)

// AdministratorApiController binds http requests to an api service and writes the service results to the http response
type AdministratorApiController struct {
	service      AdministratorApiServicer
	errorHandler common.ErrorHandler
}

// AdministratorApiOption for how the controller is set up.
type AdministratorApiOption func(*AdministratorApiController)

// WithAdministratorApiErrorHandler inject ErrorHandler into controller
func WithAdministratorApiErrorHandler(h common.ErrorHandler) AdministratorApiOption {
	return func(c *AdministratorApiController) {
		c.errorHandler = h
	}
}

// NewAdministratorApiController creates a default api controller
func NewAdministratorApiController(s AdministratorApiServicer, opts ...AdministratorApiOption) common.Router {
	controller := &AdministratorApiController{
		service:      s,
		errorHandler: common.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AdministratorApiController
func (c *AdministratorApiController) Routes() common.Routes {
	return common.Routes{
		{
			"GetQuestions",
			strings.ToUpper("Get"),
			"/v0/question",
			c.GetQuestions,
			true,
		},
		{
			"GetUsers",
			strings.ToUpper("Get"),
			"/v0/user",
			c.GetUsers,
			true,
		},
		{
			"UpdateChurchActivate",
			strings.ToUpper("Patch"),
			"/v0/church/{churchUUID}/activate",
			c.UpdateChurchActivate,
			true,
		},
	}
}

// GetQuestions - Retrieve all questions
func (c *AdministratorApiController) GetQuestions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetQuestions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	common.EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetUsers - Retrieve all users
func (c *AdministratorApiController) GetUsers(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetUsers(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	common.EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateChurchActivate - Activate or deactivate church
func (c *AdministratorApiController) UpdateChurchActivate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	churchUUIDParam := params["churchUUID"]

	isActiveParam := model.InlineObject{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&isActiveParam); err != nil {
		c.errorHandler(w, r, &common.ParsingError{Err: err}, nil)
		return
	}
	if err := model.AssertInlineObjectRequired(isActiveParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateChurchActivate(r.Context(), churchUUIDParam, isActiveParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	common.EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
