/*
 * Hello Neighbour
 *
 * This is the API for the 'Hello Neighbour' project inspired from the COVID-19 Global Church Hack
 *
 * API version: 0.0.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package rest

import (
	"context"
	"net/http"

	"github.com/jsfan/hello-neighbour-api/internal/rest/common"
	"github.com/jsfan/hello-neighbour-api/internal/rest/model"
)

// AdministratorApiRouter defines the required methods for binding the api requests to a responses for the AdministratorApi
// The AdministratorApiRouter implementation should parse necessary information from the http request,
// pass the data to a AdministratorApiServicer to perform the required actions, then write the service results to the http response.
type AdministratorApiRouter interface {
	GetQuestions(http.ResponseWriter, *http.Request)
	GetUsers(http.ResponseWriter, *http.Request)
	UpdateChurchActivate(http.ResponseWriter, *http.Request)
}

// DefaultApiRouter defines the required methods for binding the api requests to a responses for the DefaultApi
// The DefaultApiRouter implementation should parse necessary information from the http request,
// pass the data to a DefaultApiServicer to perform the required actions, then write the service results to the http response.
type DefaultApiRouter interface {
	AddUser(http.ResponseWriter, *http.Request)
}

// LeaderApiRouter defines the required methods for binding the api requests to a responses for the LeaderApi
// The LeaderApiRouter implementation should parse necessary information from the http request,
// pass the data to a LeaderApiServicer to perform the required actions, then write the service results to the http response.
type LeaderApiRouter interface {
	AddQuestion(http.ResponseWriter, *http.Request)
	DeleteChurch(http.ResponseWriter, *http.Request)
	DeleteChurchMember(http.ResponseWriter, *http.Request)
	DeleteQuestion(http.ResponseWriter, *http.Request)
	EditChurch(http.ResponseWriter, *http.Request)
	GetChurch(http.ResponseWriter, *http.Request)
	GetChurchMembers(http.ResponseWriter, *http.Request)
	GetChurchQuestions(http.ResponseWriter, *http.Request)
	GetMatchGroups(http.ResponseWriter, *http.Request)
	GetQuestion(http.ResponseWriter, *http.Request)
	ModifyQuestion(http.ResponseWriter, *http.Request)
	SendInvite(http.ResponseWriter, *http.Request)
}

// MemberApiRouter defines the required methods for binding the api requests to a responses for the MemberApi
// The MemberApiRouter implementation should parse necessary information from the http request,
// pass the data to a MemberApiServicer to perform the required actions, then write the service results to the http response.
type MemberApiRouter interface {
	AcceptInvite(http.ResponseWriter, *http.Request)
	AddChurch(http.ResponseWriter, *http.Request)
	AddContactMethod(http.ResponseWriter, *http.Request)
	DeleteContactMethod(http.ResponseWriter, *http.Request)
	DeleteUser(http.ResponseWriter, *http.Request)
	EditUser(http.ResponseWriter, *http.Request)
	GetChurches(http.ResponseWriter, *http.Request)
	GetMatchGroup(http.ResponseWriter, *http.Request)
	GetMessages(http.ResponseWriter, *http.Request)
	GetUser(http.ResponseWriter, *http.Request)
	LoginUser(http.ResponseWriter, *http.Request)
	SendMessage(http.ResponseWriter, *http.Request)
	UpdateContactMethod(http.ResponseWriter, *http.Request)
	UserProfile(http.ResponseWriter, *http.Request)
}

// AdministratorApiServicer defines the api actions for the AdministratorApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AdministratorApiServicer interface {
	GetQuestions(context.Context) (common.ImplResponse, error)
	GetUsers(context.Context) (common.ImplResponse, error)
	UpdateChurchActivate(context.Context, string, model.InlineObject) (common.ImplResponse, error)
}

// DefaultApiServicer defines the api actions for the DefaultApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DefaultApiServicer interface {
	AddUser(context.Context, model.UserIn) (common.ImplResponse, error)
}

// LeaderApiServicer defines the api actions for the LeaderApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type LeaderApiServicer interface {
	AddQuestion(context.Context, string, model.QuestionIn) (common.ImplResponse, error)
	DeleteChurch(context.Context, string) (common.ImplResponse, error)
	DeleteChurchMember(context.Context, string, string) (common.ImplResponse, error)
	DeleteQuestion(context.Context, string) (common.ImplResponse, error)
	EditChurch(context.Context, string, model.ChurchIn) (common.ImplResponse, error)
	GetChurch(context.Context, string) (common.ImplResponse, error)
	GetChurchMembers(context.Context, string) (common.ImplResponse, error)
	GetChurchQuestions(context.Context, string) (common.ImplResponse, error)
	GetMatchGroups(context.Context, string) (common.ImplResponse, error)
	GetQuestion(context.Context, string) (common.ImplResponse, error)
	ModifyQuestion(context.Context, string, model.QuestionIn) (common.ImplResponse, error)
	SendInvite(context.Context, string, []model.MemberInvite) (common.ImplResponse, error)
}

// MemberApiServicer defines the api actions for the MemberApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MemberApiServicer interface {
	AcceptInvite(context.Context, string, model.UserIn) (common.ImplResponse, error)
	AddChurch(context.Context, model.ChurchIn) (common.ImplResponse, error)
	AddContactMethod(context.Context, string, model.ContactMethodIn) (common.ImplResponse, error)
	DeleteContactMethod(context.Context, string, string) (common.ImplResponse, error)
	DeleteUser(context.Context, string) (common.ImplResponse, error)
	EditUser(context.Context, string, model.UserIn) (common.ImplResponse, error)
	GetChurches(context.Context) (common.ImplResponse, error)
	GetMatchGroup(context.Context, string) (common.ImplResponse, error)
	GetMessages(context.Context, string, string) (common.ImplResponse, error)
	GetUser(context.Context, string) (common.ImplResponse, error)
	LoginUser(context.Context) (common.ImplResponse, error)
	SendMessage(context.Context, string, string, model.MessageIn) (common.ImplResponse, error)
	UpdateContactMethod(context.Context, string, string, model.ContactMethodIn) (common.ImplResponse, error)
	UserProfile(context.Context) (common.ImplResponse, error)
}
