/*
 * Hello Neighbour
 *
 * This is the API for the 'Hello Neighbour' project inspired from the COVID-19 Global Church Hack
 *
 * API version: 0.0.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package rest

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/jsfan/hello-neighbour-api/internal/rest/common"
	"github.com/jsfan/hello-neighbour-api/internal/rest/model"

	"github.com/gorilla/mux"
)

// LeaderApiController binds http requests to an api service and writes the service results to the http response
type LeaderApiController struct {
	service      LeaderApiServicer
	errorHandler common.ErrorHandler
}

// LeaderApiOption for how the controller is set up.
type LeaderApiOption func(*LeaderApiController)

// WithLeaderApiErrorHandler inject ErrorHandler into controller
func WithLeaderApiErrorHandler(h common.ErrorHandler) LeaderApiOption {
	return func(c *LeaderApiController) {
		c.errorHandler = h
	}
}

// NewLeaderApiController creates a default api controller
func NewLeaderApiController(s LeaderApiServicer, opts ...LeaderApiOption) common.Router {
	controller := &LeaderApiController{
		service:      s,
		errorHandler: common.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LeaderApiController
func (c *LeaderApiController) Routes() common.Routes {
	return common.Routes{
		{
			"AddQuestion",
			strings.ToUpper("Post"),
			"/v0/church/{churchUUID}/question",
			c.AddQuestion,
			true,
		},
		{
			"DeleteChurch",
			strings.ToUpper("Delete"),
			"/v0/church/{churchUUID}",
			c.DeleteChurch,
			true,
		},
		{
			"DeleteChurchMember",
			strings.ToUpper("Delete"),
			"/v0/church/{churchUUID}/user/{userUUID}",
			c.DeleteChurchMember,
			true,
		},
		{
			"DeleteQuestion",
			strings.ToUpper("Delete"),
			"/v0/question/{questionUUID}",
			c.DeleteQuestion,
			true,
		},
		{
			"EditChurch",
			strings.ToUpper("Put"),
			"/v0/church/{churchUUID}",
			c.EditChurch,
			true,
		},
		{
			"GetChurch",
			strings.ToUpper("Get"),
			"/v0/church/{churchUUID}",
			c.GetChurch,
			true,
		},
		{
			"GetChurchMembers",
			strings.ToUpper("Get"),
			"/v0/church/{churchUUID}/user",
			c.GetChurchMembers,
			true,
		},
		{
			"GetChurchQuestions",
			strings.ToUpper("Get"),
			"/v0/church/{churchUUID}/question",
			c.GetChurchQuestions,
			true,
		},
		{
			"GetMatchGroups",
			strings.ToUpper("Get"),
			"/v0/church/{churchUUID}/matchgroup",
			c.GetMatchGroups,
			true,
		},
		{
			"GetQuestion",
			strings.ToUpper("Get"),
			"/v0/question/{questionUUID}",
			c.GetQuestion,
			true,
		},
		{
			"ModifyQuestion",
			strings.ToUpper("Put"),
			"/v0/question/{questionUUID}",
			c.ModifyQuestion,
			true,
		},
		{
			"SendInvite",
			strings.ToUpper("Post"),
			"/v0/church/{churchUUID}/invite",
			c.SendInvite,
			true,
		},
	}
}

// AddQuestion - Add question
func (c *LeaderApiController) AddQuestion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	churchUUIDParam := params["churchUUID"]

	bodyParam := model.QuestionIn{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &common.ParsingError{Err: err}, nil)
		return
	}
	if err := model.AssertQuestionInRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddQuestion(r.Context(), churchUUIDParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	common.EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteChurch - Delete church
func (c *LeaderApiController) DeleteChurch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	churchUUIDParam := params["churchUUID"]

	result, err := c.service.DeleteChurch(r.Context(), churchUUIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	common.EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteChurchMember - Remove member from church
func (c *LeaderApiController) DeleteChurchMember(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	churchUUIDParam := params["churchUUID"]

	userUUIDParam := params["userUUID"]

	result, err := c.service.DeleteChurchMember(r.Context(), churchUUIDParam, userUUIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	common.EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteQuestion - Delete question
func (c *LeaderApiController) DeleteQuestion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	questionUUIDParam := params["questionUUID"]

	result, err := c.service.DeleteQuestion(r.Context(), questionUUIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	common.EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// EditChurch - Update church details
func (c *LeaderApiController) EditChurch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	churchUUIDParam := params["churchUUID"]

	bodyParam := model.ChurchIn{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &common.ParsingError{Err: err}, nil)
		return
	}
	if err := model.AssertChurchInRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EditChurch(r.Context(), churchUUIDParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	common.EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetChurch - Retrieve details of a specific church
func (c *LeaderApiController) GetChurch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	churchUUIDParam := params["churchUUID"]

	result, err := c.service.GetChurch(r.Context(), churchUUIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	common.EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetChurchMembers - Retrieve church members
func (c *LeaderApiController) GetChurchMembers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	churchUUIDParam := params["churchUUID"]

	result, err := c.service.GetChurchMembers(r.Context(), churchUUIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	common.EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetChurchQuestions - Retrieve list of all questions
func (c *LeaderApiController) GetChurchQuestions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	churchUUIDParam := params["churchUUID"]

	result, err := c.service.GetChurchQuestions(r.Context(), churchUUIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	common.EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetMatchGroups - Retrieve list of current match groups
func (c *LeaderApiController) GetMatchGroups(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	churchUUIDParam := params["churchUUID"]

	result, err := c.service.GetMatchGroups(r.Context(), churchUUIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	common.EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetQuestion - Retrieve question
func (c *LeaderApiController) GetQuestion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	questionUUIDParam := params["questionUUID"]

	result, err := c.service.GetQuestion(r.Context(), questionUUIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	common.EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ModifyQuestion - Update question
func (c *LeaderApiController) ModifyQuestion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	questionUUIDParam := params["questionUUID"]

	bodyParam := model.QuestionIn{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &common.ParsingError{Err: err}, nil)
		return
	}
	if err := model.AssertQuestionInRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ModifyQuestion(r.Context(), questionUUIDParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	common.EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// SendInvite - Send invite
func (c *LeaderApiController) SendInvite(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	churchUUIDParam := params["churchUUID"]

	emailParam := []model.MemberInvite{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&emailParam); err != nil {
		c.errorHandler(w, r, &common.ParsingError{Err: err}, nil)
		return
	}
	for _, el := range emailParam {
		if err := model.AssertMemberInviteRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.SendInvite(r.Context(), churchUUIDParam, emailParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	common.EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
