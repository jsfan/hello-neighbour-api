openapi: 3.0.1
info:
  title: COVID-19 Global Church Hack 'Hello Neighbour'
  description: This is the API for COVID-19 Global Church Hack 'Hello Neighbour' project
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
servers:
- url: https://localhost/v0
tags:
- name: leader
  description: Everything that relates to church leaders interacting with the system
- name: member
  description: Everything relating to church members interacting with the system
paths:
  /church:
    post:
      tags:
      - leader
      summary: Add new church
      description: Add new church to the system to invite members to
      operationId: addChurch
      requestBody:
        description: Church details for new account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChurchIn'
        required: true
      responses:
        200:
          description: Church added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Church'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - common_auth: []
      x-codegen-request-body-name: body
  /church/{churchUuid}:
    get:
      tags:
      - leader
      summary: Retrieve church details
      description: Retrieve church details.
      operationId: getChurch
      parameters:
      - name: churchUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Church details
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Church'
        404:
          description: Church not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - common_auth: []
    put:
      tags:
      - leader
      summary: Update church
      description: Update church identified by church's UUID. All attributes can be
        edited.
      operationId: editChurch
      parameters:
      - name: churchUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: New church details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChurchIn'
        required: true
      responses:
        200:
          description: Church profile modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChurchIn'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Church not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - common_auth: []
      x-codegen-request-body-name: body
    delete:
      tags:
      - leader
      summary: Delete church
      description: Delete a church from the system.
      operationId: deleteChurch
      parameters:
      - name: churchUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        204:
          description: Church deleted
          content: {}
        404:
          description: Church not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - common_auth: []
  /church/invite:
    post:
      tags:
      - leader
      summary: Send invite
      description: Send an email invite to add new church members
      operationId: sendInvite
      parameters:
      - name: churchUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: email
        required: true
      responses:
        204:
          description: Invites sent
          content: {}
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: email
      security:
        - common_auth: []
  /church/question:
    get:
      tags:
      - leader
      summary: Retrieve list of all your church's questions
      description: Retrieve questions of a specific church.
      operationId: getQuestions
      parameters:
      - name: churchUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Question list
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        404:
          description: Church not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - common_auth: []
    post:
      tags:
      - leader
      summary: Add question
      description: Add a question to the system.
      operationId: addQuestion
      parameters:
      - name: churchUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Question for the church
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionIn'
        required: true
      responses:
        200:
          description: Question added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Church not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
      security:
        - common_auth: []
  /church/question/{questionUuid}:
    get:
      tags:
      - leader
      summary: Retrieve question
      description: Retrieve a question for church for given UUIDs.
      operationId: getQuestion
      parameters:
      - name: churchUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: questionUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Church question
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Question'
        404:
          description: Question not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - common_auth: []
    put:
      tags:
      - leader
      summary: Update question
      description: Update a question that's already in the system.
      operationId: modifyQuestion
      parameters:
      - name: churchUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: questionUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Question for the church
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionIn'
        required: true
      responses:
        200:
          description: Question updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Question not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
      security:
        - common_auth: []
    delete:
      tags:
      - leader
      summary: Delete question
      description: Delete a question from the system.
      operationId: deleteQuestion
      parameters:
      - name: churchUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: questionUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        204:
          description: Question deleted
          content: {}
        404:
          description: Question not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - common_auth: []
  /church/matchgroups:
    get:
      tags:
      - leader
      summary: Retrieve list of all your church match groups
      description: Retrieve all match groups of a specific church.
      operationId: getMatchGroups
      parameters:
      - name: churchUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Match group list
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        404:
          description: Church not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - common_auth: []
  /user:
    post:
      tags:
      - member
      summary: Create new user account
      description: Create a new user to be authenticated via Firebase. Both church
        leaders and members need such an account.
      operationId: createUser
      requestBody:
        description: User details for new account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIn'
        required: true
      responses:
        200:
          description: User account created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
      security:
        - common_auth: []
  /user/{userUuid}:
    get:
      tags:
      - member
      summary: Retrieve user details
      description: Retrieve user details.
      operationId: getUser
      parameters:
      - name: userUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: User details
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - common_auth: []
    put:
      tags:
      - member
      summary: Update user
      description: Update user identified by user's UUID. All attributes can be edited.
      operationId: editUser
      parameters:
      - name: userUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: New user details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIn'
        required: true
      responses:
        200:
          description: User account updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
      security:
        - common_auth: []
    delete:
      tags:
      - member
      summary: Delete user
      description: Delete identified by user's UUID.
      operationId: deleteUser
      parameters:
      - name: userUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        204:
          description: User deleted
          content: {}
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/contactmethod:
    post:
      tags:
      - member
      summary: Add a contact method to a user profile
      description: Add a new contact method to an existing user profile.
      operationId: addContactMethod
      parameters:
      - name: userUuid
        in: path
        description: User's UUID
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Details of new contact method
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ContactMethodIn'
        required: true
      responses:
        200:
          description: Contact method created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactMethod'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /user/contactmethod/{methodUuid}:
    put:
      tags:
      - member
      summary: Update a contact method for a user
      description: Update a contact method for a user profile.
      operationId: updateContactMethod
      parameters:
      - name: userUuid
        in: path
        description: User's UUID
        required: true
        schema:
          type: string
          format: uuid
      - name: methodUuid
        in: path
        description: Contact method's UUID
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: New details of contact method
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ContactMethodIn'
        required: true
      responses:
        200:
          description: Contact method updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactMethod'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Contact method or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
    delete:
      tags:
      - member
      summary: Delete a contact method from a user profile
      description: Delete a contact method from a user profile.
      operationId: deleteContactMethod
      parameters:
      - name: userUuid
        in: path
        description: User's UUID
        required: true
        schema:
          type: string
          format: uuid
      - name: methodUuid
        in: path
        description: Contact method's UUID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        204:
          description: Contact method deleted
          content: {}
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Contact method or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/church/{churchUuid}:
    get:
      tags:
      - member
      summary: Retrieve public church details
      description: Retrieve public church details.
      operationId: getChurchPublic
      parameters:
      - name: userUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: churchUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Public church details
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ChurchPublic'
        404:
          description: Church not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/matchgroup:
    get:
      tags:
      - member
      summary: Retrieve group
      description: Retrieve the group of the matched user.
      operationId: getMatchGroup
      parameters:
      - name: churchUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: userUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Group of matched church members
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Group'
        404:
          description: Group not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/bulletin:
    get:
      tags:
      - member
      summary: Retrieve all messages
      description: Retrieve messages posted on a group's bulletin.
      operationId: getMessages
      parameters:
      - name: userUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: churchUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: matchGroupUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Messages on a group's bulletin.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        404:
          description: Church/group not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - member
      summary: Send message
      description: Post a message to the group's bulletin.
      operationId: sendMessage
      parameters:
      - name: userUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: churchUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: matchGroupUuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Message to send to group
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageIn'
        required: true
      responses:
        200:
          description: Message sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageIn'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Church/group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
components:
  schemas:
    UserBase:
      type: object
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        description:
          type: string
        church:
          type: string
          format: uuid
    UserPublic:
      allOf:
      - $ref: '#/components/schemas/UserBase'
      - type: object
        properties:
          uuid:
            type: string
            format: uuid
          contact:
            type: array
            items:
              $ref: '#/components/schemas/ContactMethod'
    UserIn:
      allOf:
      - $ref: '#/components/schemas/UserBase'
      - type: object
        properties:
          dateOfBirth:
            type: string
            format: date
    User:
      allOf:
      - $ref: '#/components/schemas/UserIn'
      - type: object
        properties:
          uuid:
            type: string
            format: uuid
          contact:
            type: array
            items:
              $ref: '#/components/schemas/ContactMethod'
    ChurchBase:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        address:
          type: string
        website:
          type: string
          format: url
        email:
          type: string
          format: email
        phone:
          type: string
        main_contact:
          type: string
          format: uuid
    ChurchPublic:
      allOf:
      - $ref: '#/components/schemas/ChurchBase'
      - type: object
        properties:
          uuid:
            type: string
            format: uuid
    ChurchIn:
      allOf:
      - $ref: '#/components/schemas/ChurchBase'
      - type: object
        properties:
          group_size:
            multipleOf: 2
            maximum: 1E+1
            minimum: 2
            type: integer
          same_gender:
            type: boolean
          min_age:
            type: integer
    Church:
      allOf:
      - $ref: '#/components/schemas/ChurchIn'
      - type: object
        properties:
          uuid:
            type: string
            format: uuid
    ContactMethodIn:
      type: object
      properties:
        label:
          type: string
        contactDetails:
          type: string
        user:
          type: string
          format: uuid
    ContactMethod:
      allOf:
      - $ref: '#/components/schemas/ContactMethodIn'
      - type: object
        properties:
          uuid:
            type: string
            format: uuid
    QuestionIn:
      type: object
      properties:
        question:
          type: string
        church:
          type: string
          format: uuid
    Question:
      allOf:
      - $ref: '#/components/schemas/QuestionIn'
      - type: object
        properties:
          uuid:
            type: string
            format: uuid
    Group:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        created:
          type: string
          format: date
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserPublic'
    MessageIn:
      type: object
      properties:
        group:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
        sent:
          type: string
          format: datetime
        message:
          type: string
    Message:
      allOf:
      - $ref: '#/components/schemas/MessageIn'
      - type: object
        properties:
          uuid:
            type: string
            format: uuid
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  securitySchemes:
    common_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT